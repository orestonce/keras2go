package example

import "github.com/orestonce/keras2go"
import "testing"
import "time"
import "fmt"
import "strconv"
import "math"

func TestFn_Example(t *testing.T) {
	maxabs := func(tensor1, tensor2 *keras2go.K2c_tensor) float64 {

		var x float64
		for i := 0; i < tensor1.Numel; i++ {

			y := math.Abs(tensor1.Array[i] - tensor2.Array[i])
			if y > x {
				x = y
			}
		}
		return x
	}

	var test1_input_1_input_array = []float64{
		+3.19117614e-01, -9.37518408e-01, +1.44289315e+00, -1.21079539e+00, +1.17923315e+00,
		-1.04495526e+00, +1.67577112e+00, +4.58077945e-01, -1.15618808e+00, -1.61206489e+00,
		+1.13108107e+00, +4.31080938e-01, +1.13640465e+00, +1.55990816e+00, -1.21221343e+00,
		+7.72649430e-01, -1.26768858e+00, -1.80872995e-01, -6.36677184e-01, +9.38828728e-01,
		-9.49838780e-01, +3.81311929e-01, +1.51601428e+00, -7.29253670e-01, -2.60014639e-01,
		-8.80890193e-01, -1.94603528e+00, -1.17348814e+00, +2.55402128e-01, +1.15804326e+00,
		-1.13204193e+00, -8.11379823e-01, +1.57426253e+00, +1.19610859e+00, +6.84523070e-01,
		-1.29406641e+00, +3.85877136e-01, +5.84835233e-01, +6.50399476e-02, -2.42293084e-01,
		+1.91697958e+00, +1.44008146e+00, -8.23287869e-01, -6.58061292e-01, -1.08162235e+00,
		+1.91833209e+00, -1.24897442e+00, -5.69529543e-01, +1.18184609e+00, +9.20089380e-01,
		-1.01068969e+00, -7.12130855e-02, -3.35497003e-01, -2.24438382e-01, +1.03264400e+00,
		-1.18729354e+00, +1.61505112e+00, +7.58002243e-02, -1.40833643e+00, +1.62358275e-01,
		-5.60303692e-01, -6.87569290e-01, +1.35542920e+00, -1.95197973e+00, +1.05724023e+00,
		+1.22264808e+00, -7.89502353e-01, -7.28165814e-01, -2.33774210e-01, -1.21278484e+00,
		-8.85924165e-02, +1.41625575e+00, +2.80318319e-01, -2.93392505e-01, -4.03312279e-02,
		+1.22990714e+00, +3.80861039e-01, -1.31494928e+00, +1.78848795e+00, +9.42103738e-01,
		+1.14581078e+00, -1.94825432e-01, +1.02275831e+00, +1.54113969e+00, -1.26645862e+00,
		+4.10689388e-01, -6.21299601e-01, -1.06121292e+00, +1.40606756e-01, -5.07479718e-01,
		-5.20095655e-01, +3.17379291e-01, -8.78799287e-01, -1.76427857e+00, +1.85345126e+00,
		+1.04432622e+00, +7.04152639e-01, +1.85423273e+00, -1.44423050e-01, +8.62694813e-01,
		+4.96711238e-01, -1.27894527e+00, +6.05433480e-02, -7.58735197e-01, -1.96308957e+00,
		+1.60853012e+00, -3.35286943e-01, +7.65893155e-01, +7.25117777e-03, +1.42604368e+00,
		-1.59831130e+00, +1.54386550e+00, -1.12530117e+00, -7.39141275e-01, +1.77826538e+00,
		+7.40427415e-01, -1.09587990e+00, -5.56050839e-01, +8.67195762e-01, -1.00899380e-01,
		-1.06977292e+00, +1.22468744e+00, +1.84020048e+00, -1.22578887e+00, -1.17727466e+00,
		+2.53004473e-01, -1.76115324e+00, +1.01606013e+00, -2.51385241e-01, -1.06045863e+00,
		+1.07717883e+00, +6.67656896e-01, +1.45101555e+00, +1.92453801e+00, -3.56882491e-01,
		+6.21696640e-01, +6.75769954e-01, -4.77566537e-01, +5.95927043e-01, -1.61499457e+00,
		-1.53986394e-01, -1.22996038e+00, +1.37079108e+00, -1.94172348e+00, +1.20450282e+00,
		-1.78476678e+00, +1.19970699e+00, +1.29554373e+00, -1.40816361e+00, -7.52260027e-01,
		+3.63089082e-01, +6.68152062e-01, +1.63768609e+00, +9.50266270e-01, +1.40211613e+00,
		+4.10465509e-01, -5.23459772e-01, -7.12911328e-01, -1.90491564e+00, -8.11452605e-02,
		-8.97660010e-01, -2.12744013e-01, -4.87818930e-01, +3.32794509e-01, +1.13414701e+00,
		-1.55740471e+00, +1.17792189e+00, +1.87862820e+00, +1.55470183e+00, +1.16871153e+00,
		-2.74717671e-01, -8.39749975e-01, -1.81943259e+00, +1.67776475e+00, +1.24894458e+00,
		+1.59680729e+00, -6.46392687e-01, -2.08546858e-01, -1.48892822e+00, +1.63147514e+00,
		-3.74722633e-02, -1.45301847e+00, +1.75011729e+00, +7.57073620e-01, +2.01553848e-01,
		+1.30508267e+00, -1.06592886e+00, -6.84810224e-01, +1.40481189e-01, +1.23613713e-02,
		+1.68565205e+00, +1.43236355e+00, -1.63009183e+00, -1.93715575e+00, +8.65623663e-01,
		+8.13924932e-01, -1.39462070e+00, +1.33496187e+00, -8.05838231e-02, +1.83786248e+00,
		+1.96154257e+00, -9.97622898e-01, -1.41613785e+00, +1.50190395e+00, +1.95644338e+00,
		-4.41136932e-01, +1.93231385e+00, -1.23696236e+00, +1.53944259e+00, -4.11612302e-01,
		+9.73934813e-01, +7.86252203e-02, +9.17728087e-01, -1.91109449e+00, +9.60616862e-01,
		-1.36521185e+00, -5.59499871e-01, -6.43476395e-01, -3.11013087e-01, +1.01181831e+00,
		-1.97542997e-01, +3.74876035e-01, -1.36470958e+00, -1.88425869e+00, +4.53849044e-01,
		+7.01904156e-01, -3.56521932e-01, -1.89399250e+00, +7.63572262e-01, +1.00998657e-01,
		-1.03220332e+00, -1.82804613e+00, +1.32759258e+00, +1.05016656e+00, -9.30277997e-01,
		+7.80570736e-01, -1.94827627e-02, +1.12406410e+00, +1.26804346e+00, +1.22857902e+00,
		-1.30548176e-01, +5.55458292e-01, +4.19729840e-01, +1.26388854e+00, -1.64721150e+00,
		-8.16951557e-02, -1.43702392e+00, -3.33836461e-01, +1.04322921e+00, -1.11158563e+00,
		-2.33084274e-01, -1.86958629e+00, -4.04856557e-02, +8.17863844e-01, +1.20417336e+00,
		-1.81327726e-01}
	var test1_input_1_input = keras2go.K2c_tensor{test1_input_1_input_array, 2, 256, [5]int{8, 32, 1, 1, 1}}
	var keras_dense_3_test1_array = []float64{
		+5.15743434e-01, +5.17478287e-01, +5.21584749e-01, +5.27964294e-01, +5.35615087e-01,
		+5.43085575e-01, +5.50764978e-01, +5.58646560e-01, +5.66745877e-01, +5.76258779e-01,
		+5.83501577e-01, +5.86628258e-01, +5.85975885e-01, +5.84297419e-01, +6.04306161e-01,
		+7.20972955e-01, +7.54132330e-01, +7.88501322e-01, +8.16998601e-01, +8.21331918e-01,
		+7.67518282e-01, +7.06075430e-01, +6.25628889e-01, +5.32115698e-01, +4.28735524e-01,
		+3.17470431e-01, +1.98355466e-01, +7.84156919e-02, -3.43956053e-02, -1.24369331e-01,
	}
	var keras_dense_3_test1 = keras2go.K2c_tensor{keras_dense_3_test1_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var c_dense_3_test1_array = make([]float64, 30)
	var c_dense_3_test1 = keras2go.K2c_tensor{c_dense_3_test1_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var test2_input_1_input_array = []float64{
		-1.00227221e+00, -1.99813053e+00, +5.72005512e-01, -1.73375531e+00, -5.57090082e-01,
		+1.63216853e+00, +1.10352656e+00, -3.90084794e-01, -1.45477593e+00, +8.30736319e-01,
		+8.90508352e-01, +1.95355194e+00, +1.32150708e+00, -1.36119168e+00, +1.52598966e+00,
		+1.63833986e+00, +2.72013336e-01, +4.57819351e-01, +1.27688735e+00, +3.42675515e-01,
		+1.84211998e-01, +1.44070578e+00, -8.24668650e-01, -1.31478050e+00, -1.24511146e+00,
		+2.97981220e-01, +1.77259420e+00, +9.63132272e-01, +1.30675869e+00, -1.58340841e+00,
		+1.48916184e-02, -1.62671283e+00, -6.71487947e-01, -1.34131977e+00, -1.83966569e+00,
		+6.54491213e-01, -1.25576277e+00, +1.24206340e-01, +7.47288699e-01, +2.53834554e-01,
		+1.77937073e+00, -1.08520075e+00, +3.90028983e-01, +1.48621125e+00, +1.95064437e+00,
		-1.50468377e+00, +1.54830873e+00, +1.15753815e+00, -2.56597968e-01, -6.02463701e-02,
		-8.72548652e-01, +1.68455485e+00, +1.46112113e-01, +1.20848313e+00, +3.35079092e-01,
		+5.82567301e-01, -1.41380205e-01, +1.46461087e+00, -1.37879812e+00, -1.21198630e+00,
		-2.43499300e-01, -1.25888764e-02, -9.11069462e-01, -1.50179287e+00, +9.22877999e-02,
		-1.15547871e+00, +1.19120116e+00, -5.09207842e-01, -9.19310887e-01, -2.63325709e-01,
		+4.67700188e-01, -1.65155563e+00, -5.29239366e-01, -4.68799051e-01, -6.44682752e-01,
		-3.34684240e-01, -1.92515917e+00, +8.85392540e-01, -1.05053504e+00, -6.14090572e-01,
		+1.42114979e+00, -1.16224234e+00, +1.02014653e+00, +1.20720753e+00, +8.25533828e-01,
		+1.40591161e+00, +1.60133701e+00, +6.81243339e-01, -3.93837172e-01, +1.79961815e+00,
		-1.73545323e+00, -1.92308448e+00, -1.44790380e+00, +8.22000161e-01, -5.29703262e-01,
		+1.06489885e+00, +1.99499603e+00, +1.96564523e+00, -1.76972569e+00, -1.33080646e+00,
		+4.37185548e-02, +1.51918372e-01, +6.09609623e-01, +1.57328417e+00, +1.69746352e+00,
		+2.82836456e-01, +9.61920927e-01, -1.87135402e+00, -9.18093437e-01, +1.20751449e+00,
		-9.48088790e-01, +1.65857411e+00, -1.52881482e+00, +1.59839461e+00, -1.04337926e+00,
		-6.83225206e-01, -9.91023018e-01, -2.89574180e-01, +4.84747780e-01, +1.28025534e+00,
		+4.32427201e-01, +1.30047693e+00, +1.90244252e+00, +9.87668302e-01, -7.10992794e-01,
		-1.37898139e+00, +4.85281956e-01, +1.81500097e+00, -1.75544829e+00, -7.47464338e-01,
		+8.03781767e-01, -7.36726832e-01, +1.15680729e+00, -1.38868160e-01, -5.28649008e-01,
		+3.91838185e-01, -1.35675395e+00, -1.94498877e+00, +1.81753192e+00, -4.79944480e-01,
		-1.18667721e+00, +2.46556792e-01, +1.24855414e+00, -1.39944227e+00, +1.52919607e+00,
		+1.78345536e+00, +1.83645883e+00, -1.53492020e+00, +1.84947878e-01, -1.41949750e+00,
		-1.57369824e+00, +1.86332267e+00, +1.21942586e+00, +8.57618890e-01, +1.08606219e+00,
		-1.26323867e+00, +1.47962458e+00, +1.19242013e+00, +1.68068297e+00, +1.75541999e+00,
		-7.78984602e-01, -1.74675394e+00, -1.04121620e-01, +1.11016249e+00, -1.88089035e-01,
		+1.09769956e+00, +3.81300402e-01, +1.34999639e+00, +1.63676883e+00, +6.70427265e-01,
		+1.38056962e+00, +1.10731970e+00, -8.87225295e-01, +6.04823006e-02, +1.51410431e+00,
		+1.85571983e+00, -8.51899909e-01, +1.32943598e+00, +1.71861254e+00, -1.30489898e+00,
		-4.05881521e-01, +1.17190128e+00, +1.72398765e+00, -3.63772770e-01, -1.07297931e+00,
		-6.81065707e-01, -9.94428022e-01, +1.49764721e+00, +4.40719184e-01, +1.07501564e+00,
		+1.17501597e+00, -6.78090624e-01, +5.43989668e-01, +1.51106382e+00, +9.66074574e-01,
		-1.01952175e-02, +1.36810566e+00, -5.78585930e-01, -1.12578266e+00, -9.40172323e-01,
		+4.80123170e-01, -1.50296051e+00, +1.80357746e+00, +9.76815827e-01, +2.23378898e-01,
		+7.25616610e-01, +4.79716205e-01, +1.14737601e+00, +9.48204430e-02, -1.78243258e+00,
		-4.66724161e-01, -7.17913116e-01, +8.93595556e-01, +2.24393280e-01, -1.03155334e+00,
		+1.58396616e+00, +1.39204589e+00, +9.08120787e-01, -3.33771564e-01, -1.45635552e+00,
		+1.70296380e+00, -3.69801832e-01, +1.54264016e+00, +1.69823088e+00, -1.44414567e+00,
		-4.89719424e-01, -7.44012532e-01, -1.60322979e+00, +1.92612067e+00, -1.13911025e+00,
		-9.60053191e-01, +1.52183018e+00, +1.99255996e+00, -4.06537245e-01, +1.37515308e+00,
		+4.21638516e-01, -9.81206258e-02, +1.30462789e+00, +1.56383470e-02, -1.01019829e+00,
		+1.97692926e+00, +5.45499906e-01, -4.29888005e-01, +5.54457218e-01, -6.57180150e-01,
		+9.71723017e-01, -8.98802031e-01, +3.27273511e-01, -1.21111411e+00, -1.38339378e+00,
		+4.34634359e-01, +1.32210722e+00, -5.55234470e-01, +1.68158638e+00, -7.93148314e-01,
		-1.15979818e+00}
	var test2_input_1_input = keras2go.K2c_tensor{test2_input_1_input_array, 2, 256, [5]int{8, 32, 1, 1, 1}}
	var keras_dense_3_test2_array = []float64{
		+3.47830147e-01, +3.46485436e-01, +3.42553645e-01, +3.36647183e-01, +3.28940451e-01,
		+3.19242120e-01, +3.08696181e-01, +2.98861712e-01, +2.92804152e-01, +2.91222811e-01,
		+2.91643381e-01, +2.92497367e-01, +2.94369340e-01, +2.98931420e-01, +3.21367472e-01,
		+4.09210384e-01, +4.34005827e-01, +4.64352459e-01, +4.97523248e-01, +5.24559736e-01,
		+5.30321717e-01, +5.24373114e-01, +5.14341474e-01, +5.01449466e-01, +4.85234231e-01,
		+4.63284791e-01, +4.32445467e-01, +3.87912035e-01, +3.27686578e-01, +2.50218898e-01,
	}
	var keras_dense_3_test2 = keras2go.K2c_tensor{keras_dense_3_test2_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var c_dense_3_test2_array = make([]float64, 30)
	var c_dense_3_test2 = keras2go.K2c_tensor{c_dense_3_test2_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var test3_input_1_input_array = []float64{
		-1.19253995e+00, -1.22620758e+00, +6.63967856e-01, +1.44981041e+00, -5.56347282e-01,
		+1.46660726e+00, -1.17071899e+00, +1.06161558e+00, +1.07030553e+00, +7.06608274e-01,
		+1.10168485e+00, +1.28003756e-01, +9.50896341e-01, -1.36359942e-01, +1.72964282e+00,
		-8.27105268e-01, +2.93677437e-01, +1.93232384e+00, +1.89464195e+00, +8.78284038e-01,
		-7.54033706e-01, -1.10127374e+00, +1.52736247e+00, -1.00850642e-01, -1.09357747e+00,
		+1.71993653e+00, -1.41371538e+00, -6.22682453e-01, -1.54039861e+00, -1.99375698e+00,
		+1.24265191e+00, -4.47294087e-01, +9.93528384e-01, -3.40170722e-01, -1.05524727e+00,
		-1.54303718e+00, -2.24984237e-01, +1.38314144e+00, +1.62487117e+00, -5.42000108e-01,
		-4.81750446e-02, -1.52823077e+00, -1.54362000e+00, +1.24248596e+00, -3.97410865e-01,
		-1.72078216e+00, +1.27101341e+00, +6.97305322e-01, -2.36448931e-02, -8.96352013e-01,
		-6.02186049e-01, -1.68064070e+00, +2.08819264e-01, -1.79987478e+00, -9.62649611e-01,
		+1.44296743e+00, -1.54386331e+00, +1.74769669e+00, -8.10365219e-02, +1.86261353e+00,
		+1.26791261e+00, -1.16380567e+00, -5.40717559e-01, +2.43447636e-01, +3.80366309e-01,
		+8.46645171e-01, +6.11722890e-01, -9.65814968e-01, -9.52782246e-01, -1.97738367e+00,
		-7.88627869e-01, +1.97593410e+00, -1.65377852e+00, -6.38241939e-01, -1.89296752e+00,
		+3.51461992e-01, -9.83085599e-01, -1.71646641e+00, +1.97400681e+00, +1.37031713e+00,
		-5.88509834e-01, +6.05663267e-01, +1.97779227e+00, +5.33989626e-01, +5.34026024e-01,
		-1.97586260e-01, +8.30334255e-01, -1.54081823e+00, +2.02855704e-01, -1.69046896e+00,
		+4.18090059e-01, -1.52561138e+00, +9.68414418e-01, +5.79591961e-01, -1.61316394e+00,
		+1.07993987e-01, +1.41917453e+00, +4.84732334e-01, +5.74873761e-01, +5.42929675e-01,
		+1.18355021e+00, +4.06109816e-01, -6.15873318e-01, +1.36591896e+00, -5.12070467e-01,
		+1.45665140e+00, -2.41649515e-01, +1.69585373e+00, -6.62361558e-01, -7.42203454e-02,
		+9.26077346e-01, +1.13023700e+00, -1.26093984e+00, -6.66571451e-01, -3.51144279e-01,
		+1.52343364e+00, -1.29098402e+00, +1.07221942e+00, -9.85286496e-01, -5.52121009e-01,
		+2.56545939e-01, +8.47078099e-01, +8.49747290e-01, -2.82999214e-01, +3.98521172e-01,
		-6.25168303e-01, +1.42962050e+00, +1.58303237e+00, +5.69503490e-01, -5.04100901e-01,
		-1.79958670e+00, +1.62706461e-01, -8.92688067e-03, -6.35354123e-01, +1.12617539e+00,
		+6.43973461e-01, +1.25206966e+00, +8.72638714e-02, +6.16589801e-01, +6.50933377e-01,
		+1.95799480e+00, +8.68752589e-01, +3.63948318e-02, -1.00262123e+00, -4.87028163e-01,
		+1.09915747e+00, +7.07981297e-01, +1.05475121e+00, +1.53192651e+00, +1.53804761e+00,
		-1.22690811e+00, +1.98465636e+00, -8.77318045e-01, -1.38405562e+00, -4.50381240e-01,
		+4.94523388e-01, -1.87462748e+00, -1.55923615e+00, +3.82616244e-01, +1.25005427e+00,
		+5.50274308e-01, +1.55032778e+00, -1.01956600e+00, +4.70558529e-02, +1.19301669e+00,
		-5.90594807e-01, -5.24664569e-01, -1.89520206e+00, +2.39790287e-01, -1.15339089e+00,
		+3.81046286e-01, -3.42741061e-01, -6.15791981e-02, +1.21284638e+00, -1.03494731e+00,
		-1.42263586e+00, -7.60634817e-01, +1.70639519e+00, -1.25738401e+00, -1.34392589e+00,
		-2.14835551e-01, +7.59028998e-01, +9.52300066e-01, +7.00584248e-01, +6.76695279e-01,
		-3.51282258e-01, +1.64690154e+00, +7.08350497e-02, +1.51097314e+00, -5.10187878e-01,
		-5.87246908e-01, -1.30822586e-01, +1.34368315e+00, -4.44164271e-01, +1.14366489e+00,
		-1.19451336e+00, -1.84969389e+00, +4.58075591e-01, -2.76553620e-02, +9.65528238e-01,
		-1.32723425e+00, +1.95678204e+00, -1.94882546e+00, -7.82373999e-01, +1.37029739e+00,
		-7.23056241e-02, +5.62680513e-01, -1.76560549e+00, +7.56143792e-01, +2.73368627e-01,
		-6.45113689e-01, -5.93541520e-01, +8.12308083e-01, -1.54508853e-01, -1.58432795e-01,
		+6.93564427e-02, -4.75547814e-01, +6.14243640e-01, +1.67895653e-01, -1.18241082e+00,
		+9.61324711e-01, -1.46472517e+00, +1.94112163e+00, -4.06597749e-01, -3.42066654e-01,
		-1.17581104e+00, +1.20121537e+00, +2.53850567e-01, -1.14414046e+00, +1.54824697e+00,
		-8.56190985e-01, -1.67753641e+00, +7.34231073e-01, +3.41835716e-01, -1.45495368e+00,
		-5.35431572e-01, -1.78398462e+00, +1.20222869e+00, -2.83610986e-01, +5.30525716e-01,
		+3.04201365e-01, +1.00614672e+00, -1.29638393e+00, +7.60411088e-01, +1.80683928e+00,
		+6.53679391e-01, +1.79093764e+00, -6.29392381e-01, -8.42724691e-01, -1.67266410e+00,
		+8.89462790e-01, -1.52167642e+00, -1.83375376e+00, +1.29318357e+00, +1.94610208e+00,
		+3.99171842e-01}
	var test3_input_1_input = keras2go.K2c_tensor{test3_input_1_input_array, 2, 256, [5]int{8, 32, 1, 1, 1}}
	var keras_dense_3_test3_array = []float64{
		-2.01597184e-01, -2.01067224e-01, -1.99944198e-01, -1.98330209e-01, -1.96816728e-01,
		-1.95607573e-01, -1.94997922e-01, -1.95034146e-01, -1.95743099e-01, -1.97304606e-01,
		-1.98873729e-01, -2.00038075e-01, -2.00971112e-01, -2.02110440e-01, -2.07767576e-01,
		-2.01994389e-01, -1.91794366e-01, -1.79333001e-01, -1.63711935e-01, -1.44381076e-01,
		-1.24028392e-01, -1.17001191e-01, -1.16552673e-01, -1.22654989e-01, -1.34061202e-01,
		-1.47095785e-01, -1.57336771e-01, -1.59819856e-01, -1.55117422e-01, -1.38194174e-01,
	}
	var keras_dense_3_test3 = keras2go.K2c_tensor{keras_dense_3_test3_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var c_dense_3_test3_array = make([]float64, 30)
	var c_dense_3_test3 = keras2go.K2c_tensor{c_dense_3_test3_array, 1, 30, [5]int{30, 1, 1, 1, 1}}
	var errors [3]float64
	var num_tests = 3
	var num_outputs = 1
	var t0 = time.Now()
	Example(&test1_input_1_input, &c_dense_3_test1)
	Example(&test2_input_1_input, &c_dense_3_test2)
	Example(&test3_input_1_input, &c_dense_3_test3)

	var t1 = time.Now()
	fmt.Println("Average time over 3 tests: ", strconv.FormatFloat(t1.Sub(t0).Seconds(), 'f', 5, 64), "s")
	errors[0] = maxabs(&keras_dense_3_test1, &c_dense_3_test1)
	errors[1] = maxabs(&keras_dense_3_test2, &c_dense_3_test2)
	errors[2] = maxabs(&keras_dense_3_test3, &c_dense_3_test3)
	var maxerror = errors[0]
	for i := 1; i < num_tests*num_outputs; i++ {
		if errors[i] > maxerror {
			maxerror = errors[i]
		}
	}
	fmt.Println("Max absolute error for 3 tests:", maxerror)
	if maxerror > 0.001 {
		t.Fatal(maxerror)
	}

}
